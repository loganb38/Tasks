install.packages("swirl")
library(swirl)
swirl()
x <- 5
stop()
exit()
q()
x <- 5
y <- 10
x + y
logan <- 6
logan * y
logan <- runif(100000)
hist(logan)
y <- 5*logan + 5 + runif(length(logan), min=-0.01,max=0.01)
plot(logan, y)
install.packages("swirl")
library(swirl)
swirl()
trueMean1 <- 5
trueSD1 <- 5
population1 <- rnorm(1e6, trueMean1, trueSD1)
trueMean2 <- 4
trueSD2 <- 5
population2 <- rnorm(1e6, trueMean2, trueSD2)
Size <- 50
Sample1 <- sample(population1, Size)
Sample2 <- sample(population2, Size)
Sample1
Sample2
boxplot(Sample1, Sample2)
source("http://jonsmitchell.com/code/simFxn04.R")
MatGrandma <- makeFounder("grandma_mom")
MatGrandpa <- makeFounder("grandpa_mom")
PatGrandma <- makeFounder("grandma_da")
PatGrandpa <- makeFounder("grandpa_da")
MatGrandma
head(MatGrandma)
nrow(MatGrandma)
head(MatGrandpa)
head(PatGrandma)
Alan <- makeBaby(PatGrandma, PatGrandpa)
Brenda <- makeBaby(MatGrandma, MatGrandpa)
Focus <- makeBaby(Brenda, Alan)
ToMom <- length(grep("mom", Focus)) / length(Focus)
ToMomMom <- length(grep("grandma_mom", Focus)) / length(Focus)
ToMomDad <- length(grep("grandpa_mom", Focus)) / length(Focus)
ToDadMom <- length(grep("grandma_da", Focus)) / length(Focus)
ToDadDad <- length(grep("grandpa_da", Focus)) / length(Focus)
Sibling_01 <- makeBaby(Brenda, Alan)
ToSib <- length(intersect(Focus, Sibling_01)) / length(Focus)
ManySiblings <- replicate(1e3, length(intersect(Focus, makeBaby(Brenda, Alan))) / length(Focus))
head(ManySiblings)
quantile(ManySiblings)
mean(ManySiblings)
plot(density(ManySiblings), main="", xlab="proportion shared genes")
HWE <- function(p) {
aa <- p^2
ab <- 2 * p * (1-p)
bb <- (1-p) ^2
return(c(aa=aa, ab=ab, bb=bb))
}
HWE(0.5)
plot(1, 1, type="n", xlim=c(0, 1), ylim=c(0, 1), xlab="freq. allele a", ylab="geno. freq")
p <- seq(from = 0, to = 1, by = 0.01)
GenoFreq <- t(sapply(p, HWE))
lines(p, GenoFreq[,"aa"], lwd=2, col="red")
lines(p, GenoFreq[,"ab"], lwd=2, col="purple")
lines(p, GenoFreq[,"bb"], lwd=2, col="blue")
legend("top", legend=c("aa", "ab", "bb"), col=c("red", "purple", "blue"), lty=1, lwd=2, bty="n")
Pop <- simPop(500)
points(Pop[,"freqa"], Pop[,"Genotypes.aa"]/500, pch=21, bg="red")
Pop <- simPop(50)
points(Pop[,"freqa"], Pop[,"Genotypes.aa"]/50, pch=22, bg="red")
library(learnPopGen)
library(learnPopGen)
library(learnPopGen)
x <- genetic.drift(Ne=200, nrep=5, pause=0.01)
x <- genetic.drift(Ne=50, nrep=5, pause=0.01)
x <- genetic.drift(Ne=1000, nrep=5, pause=0.01)
x <- genetic.drift(Ne=50, nrep=5, pause=0.01)
x <- genetic.drift(Ne=1000, nrep=5, pause=0.01)
x <- genetic.drift(Ne=600, nrep=5, pause=0.01)
PopSizes <- 5:50
Samples <- rep(PopSizes, 5)
tExt <- sapply(Samples, function(x) nrow(simPop(x, 500)))
Line <- lm(tExt ~ Samples)
summary(Line)
Line$coef
plot(Samples, tExt)
abline(Line)
Line2 <- lm(tExt ~ Samples + 0)
abline(Line2)
plot(Samples, tExt)
abline(Line2)
abline(Line)
plot(Samples, tExt)
abline(Line)
Line2 <- lm(tExt ~ Samples + O)
Line2 <- lm(tExt ~ Samples + 0)
abline(Line2)
summary(Line2)
summary(Line)
summary(Line2)
Line$coef
Line2$coef
library(MASS)
robustLine <- rlm(tExt ~ Samples)
abline(robustLine)
summary(robustLine)
robustLine$coef
setwd("~/Desktop/Evolution/Tasks/Task_05")
library(learnPopGen)
Plot1 <- coalescent.plot(n=10, ngen=20)
Plot2 <- coalescent.plot(n=50, ngen=20)
Plot3 <- coalescent.plot(n=100, ngen=200)
Plot4 <- coalescent.plot(n=10, ngen=20)
Plot5 <- coalescent.plot(n=10, ngen=20)
install.packages("rehh", dep=T)
install.packages("assertthat", dep=T)
install.packages("RcppArmadillo", dep=T)
install.packages("https://cran.r-project.org/src/contrib/Archive/scrm/scrm_1.7.3-1.tar.gz", repos=NULL, type="source")
install.packages("https://cran.r-project.org/src/contrib/Archive/coala/coala_0.6.0.tar.gz", repos=NULL, type="source")
library(phytools)
library(coala)
model <- coal_model(sample_size=5, loci_number=10, loci_length=500, ploidy=2) + feat_mutation(10) + feat_recombination(10) + sumstat_trees() + sumstat_nucleotide_div()
stats <- simulate(model, nsim=1)
Diversity <- stats$pi
Nloci <- length(stats$trees)
t1 <- read.tree(text=stats$trees[[1]][1])
plot(t1)
axisPhylo()
Age1 <- max(nodeHeights(t1))
t2 <- read.tree(text=stats$trees[[2]][1])
plot(t2)
axisPhylo()
Age2 <- max(nodeHeights(t2))
par(mfrow=c(1, 2))
plot(t1)
axisPhylo()
plot(t2)
axisPhylo()
compare.chronograms(t1, t2)
t1_1 <- read.tree(text=stats$trees[[1]][1])
t1_2 <- read.tree(text=stats$trees[[1]][2])
compare.chronograms(t1_1, t1_2)
for(locus in 1:Nloci) {
ntrees <- length(stats$trees[[locus]])
for(n in 1:ntrees) {
if(locus==1 && n==1) {
outPhy <- read.tree(text=stats$trees[[locus]][n])
}
else{
outPhy <- ape:::c.phylo(outPhy, read.tree(text=stats$trees[[locus]][n]))
}
}
}
par(mfrow=c(1,1))
densityTree(outPhy)
model2 <- coal_model(sample_size=5, loci_number=15, loci_length=500, ploidy=2) + feat_mutation(10) + feat_recombination(5) + sumstat_trees() + sumstat_nucleotide_div()
stats2 <- simulate(model2, nsim=1)
Nloci2 <- length(stats2$trees)
for(locus in 1:Nloci2) {
ntrees <- length(stats2$trees[[locus]])
for(n in 1:ntrees) {
if(locus==1 && n==1) {
outPhy2 <- read.tree(text=stats2$trees[[locus]][n])
}
else{
outPhy2 <- ape:::c.phylo(outPhy2, read.tree(text=stats2$trees[[locus]][n]))
}
}
}
par(mfrow=c(1,1))
densityTree(outPhy2)
model3 <- coal_model(10, 50) +feat_mutation(par_prior("theta", sample.int(100, 1))) + sumstat_nucleotide_div()
stats3 <- simulate(model3, nsim=40)
mean_pi <- sapply(stats3, function(x) mean(x$pi))
theta <- sapply(stats, function(x) x$pars[["theta"]])
theta <- sapply(stats, function(x) x["pars"][["theta"]])
theta <- sapply(stats, function(x) x$pars[["theta"]])
is.atomic(x)
theta <- sapply(stats, function(x) x[[pars]][["theta"]])
mean_pi <- sapply(stats3, function(x) mean(x$pi))
theta <- sapply(stats, function(x) x$pars[["theta"]])
theta <- sapply(stats, function(x) x[,'pars'][["theta"]])
model3 <- coal_model(10, 50) +
feat_mutation(par_prior("theta", sample.int(100, 1))) +
sumstat_nucleotide_div()
stats3 <- simulate(model3, nsim = 40)
mean_pi <- sapply(stats3, function(x) mean(x$pi))
theta <- sapply(stats3, function(x) x$pars[["theta"]])
plot(mean_pi, theta, cex=1, col="red", main="mean_pi Plotted Against theta", xlab="mean_pi", ylab="theta")
ylab="theta"
par(ylab="theta")
abline(lm(mean_pi ~ theta))
plot(mean_pi, theta, cex=1, col="red", main="mean_pi Plotted Against theta", xlab="mean_pi", ylab="theta")
abline(lm(mean_pi ~ theta))
lm(mean_pi ~ theta)
model4 <- coal_model(c(13,20),5) + feat_size_change(0.25, population=2, time="0") + feat_selection(strength_A=1000, population="all", time = 0, locus_group = "all") + feat_migation(0.5, 1, 2) + feat_migration(1.0, 2, 1) + feat_growth(8, time=0) + feat_growth(3, time=1)
model4 <- coal_model(c(13,20),5) + feat_size_change(0.25, population=2, time="0") + feat_selection(strength_A=1000, population="all", time = 0, locus_group = "all") + feat_migration(0.5, 1, 2) + feat_migration(1.0, 2, 1) + feat_growth(8, time=0) + feat_growth(3, time=1)
model4
stats4 <- simulate(model4, nsim = 40)
activate_msms(jar=NULL, java=NULL, priority=200, download=TRUE)
stats4 <- simulate(model4, nsim = 40)
